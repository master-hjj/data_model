{"remainingRequest":"C:\\Users\\m1980\\Desktop\\buct-kaggle\\data_model\\front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\m1980\\Desktop\\buct-kaggle\\data_model\\front\\src\\views\\stream\\draggable\\index.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\Users\\m1980\\Desktop\\buct-kaggle\\data_model\\front\\src\\views\\stream\\draggable\\index.vue","mtime":1720420573984},{"path":"C:\\Users\\m1980\\Desktop\\buct-kaggle\\data_model\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1720430444311},{"path":"C:\\Users\\m1980\\Desktop\\buct-kaggle\\data_model\\front\\node_modules\\babel-loader\\lib\\index.js","mtime":1720430444357},{"path":"C:\\Users\\m1980\\Desktop\\buct-kaggle\\data_model\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1720430444311},{"path":"C:\\Users\\m1980\\Desktop\\buct-kaggle\\data_model\\front\\node_modules\\vue-loader\\lib\\index.js","mtime":1720430443512}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/views/stream/draggable","sourcesContent":["<template>\r\n  <div id=\"wrap\">\r\n    <div id=\"chart-wrap\">\r\n\r\n      <div>\r\n        <div>数据集选择</div>\r\n        <div id=\"myPalette3\"></div>\r\n      </div>\r\n      <div>\r\n        <div>数据预处理</div>\r\n        <div id=\"myPalette1\"></div>\r\n      </div>\r\n      <div>\r\n        <div>模型选择</div>\r\n        <div id=\"myPalette2\"></div>\r\n      </div>\r\n\r\n      <div id=\"myDiagramDiv\"></div>\r\n    </div>\r\n    <div>\r\n      <button type=\"button\"\r\n              id=\"SaveButton\"\r\n              @click=\"save()\"\r\n              class=\"save-Botton\">SAVE</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n\r\n<script>\r\nimport { showpreprocess, classifiedpreprocess } from \"@/api/preprocess/upload\";\r\nimport { showNetworks } from \"@/api/model/upload\";\r\nimport { getUserData } from \"@/api/dataset/userdata\"\r\nimport go from 'gojs'\r\nconst $ = go.GraphObject.make;\r\nexport default {\r\n  name: \"Draggable\",\r\n  data () {\r\n    return {\r\n      preprocess_node: undefined,\r\n      model_node: undefined,\r\n      data_node: undefined,\r\n      shape: ['Circle', 'Square', 'RoundedRectangle', 'Rectangle', 'Ellipse', 'Triangle'],\r\n      color: ['#99FF00', '#FF6600', '#FF33CC', '#6633FF', '#009966', '#009999']\r\n      // nodeData: [\r\n      //   { \"category\": \"data_process\", \"text\": \"规则\", \"key\": -1, \"loc\": \"-605.5896437273716 -214.50164873808765\" },\r\n      //   { \"category\": \"model\", \"text\": \"计划1\", \"key\": -2, \"loc\": \"-173.03724493296755 -192.24882726306356\" },\r\n      // ],\r\n      // linkData: [\r\n      //   { \"from\": -1, \"to\": -2 },\r\n      // ],\r\n    }\r\n  },\r\n\r\n  mounted () {\r\n\r\n    this.initDiagram();\r\n\r\n    getUserData().then(res => {\r\n      const grouped = res.reduce((accumulator, item) => {\r\n        // 如果accumulator中还没有当前项的cat属性，就先初始化为空数组\r\n        if (!accumulator[item.origin_dataset]) {\r\n          accumulator[item.origin_dataset] = [];\r\n        }\r\n        // 然后向数组中添加当前项的text\r\n        accumulator[item.origin_dataset].push(item.name);\r\n        return accumulator;\r\n      }, {});\r\n      // console.log(111);\r\n      // console.log(grouped);\r\n\r\n      this.data_node = grouped\r\n      console.log(this.data_node);\r\n      this.init3()\r\n    })\r\n\r\n    classifiedpreprocess().then(res => {\r\n      this.preprocess_node = res\r\n      // console.log(this.preprocess_node);\r\n      this.init1()\r\n    })\r\n\r\n    showNetworks().then(res => {\r\n      const grouped = res.reduce((accumulator, item) => {\r\n        // 如果accumulator中还没有当前项的cat属性，就先初始化为空数组\r\n        if (!accumulator[item.category]) {\r\n          accumulator[item.category] = [];\r\n        }\r\n        // 然后向数组中添加当前项的text\r\n        accumulator[item.category].push(item.name);\r\n        return accumulator;\r\n      }, {});\r\n      // console.log(grouped);\r\n\r\n      this.model_node = grouped\r\n      console.log(this.model_node);\r\n      this.init2()\r\n    })\r\n\r\n  },\r\n  methods: {\r\n    save () {\r\n      var mySelf = this;\r\n      console.log(mySelf.myDiagram.model.toJson());\r\n      mySelf.myDiagram.isModified = false;\r\n    },\r\n    initDiagram () {\r\n      class DemoForceDirectedLayout extends go.ForceDirectedLayout { //布局\r\n        makeNetwork (coll) {\r\n          const net = super.makeNetwork(coll);\r\n          net.vertexes.each(vertex => {\r\n            const node = vertex.node;\r\n            if (node !== null) vertex.isFixed = node.isSelected;\r\n          });\r\n          return net;\r\n        }\r\n      }\r\n      var mySelf = this;\r\n\r\n      mySelf.myDiagram =\r\n        $(go.Diagram, \"myDiagramDiv\",  // 为DIV.HTML元素创建一个画布\r\n          {\r\n            //设置画布配置\r\n            initialContentAlignment: go.Spot.Center, // 居中显示\r\n            \"undoManager.isEnabled\": true, // 支持 Ctrl-Z 和 Ctrl-Y 操作\r\n            \"toolManager.hoverDelay\": 100, //tooltip提示显示延时\r\n            \"toolManager.toolTipDuration\": 10000, //tooltip持续显示时间\r\n            //isReadOnly:true,//只读\r\n            \"grid.visible\": true, //显示网格\r\n            allowMove: true, //允许拖动\r\n            allowDragOut: true,\r\n            allowDelete: true,\r\n            allowCopy: true,\r\n            allowClipboard: true, initialAutoScale: go.Diagram.Uniform,  // 缩放以使所有内容都适合\r\n\r\n            \"toolManager.mouseWheelBehavior\": go.ToolManager.WheelZoom, //有鼠标滚轮事件放大和缩小，而不是向上和向下滚动\r\n            'clickCreatingTool.archetypeNodeData': { category: 'model', text: '新节点', notice: '' }, // 双击新建节点(可以写入节点的默认信息)；\r\n            layout: new DemoForceDirectedLayout()\r\n          });\r\n\r\n      mySelf.myDiagram.linkTemplate = $(go.Link, {\r\n        selectable: true, //连接线是否可选\r\n        relinkableFrom: true,//出发点是否可以改变\r\n        relinkableTo: true,//目标点是否可以改变\r\n      }, new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n        $(go.Shape, {\r\n          strokeWidth: 2,//节点连接线宽度\r\n          stroke: \"#F60\"//颜色\r\n        }),\r\n        $(go.Shape, {\r\n          toArrow: \"Standard\",\r\n          fill: \"red\",//箭头填充色\r\n          stroke: \"blue\"//外边框颜色\r\n        })//箭头\r\n      );\r\n\r\n      mySelf.myDiagram.addDiagramListener(\"Modified\", e => { //监听画布是否修改\r\n        const button = document.getElementById(\"SaveButton\");\r\n        if (button) button.disabled = !mySelf.myDiagram.isModified;\r\n        const idx = document.title.indexOf(\"*\");\r\n        if (mySelf.myDiagram.isModified) {\r\n          if (idx < 0) document.title += \"*\";\r\n        } else {\r\n          if (idx >= 0) document.title = document.title.slice(0, idx);\r\n        }\r\n      });\r\n    },\r\n\r\n    init1 () {\r\n      var mySelf = this;\r\n      var count = 0\r\n      // console.log(this.preprocess_node);\r\n      for (var key in this.preprocess_node) {\r\n        mySelf.myDiagram.nodeTemplateMap.add(//创建名为node258的节点\r\n          key,\r\n          $(go.Node,\r\n            \"auto\",\r\n            {\r\n              movable: true,//是否可拖动\r\n              deletable: true,//是否可删除\r\n              selectable: true, //是否可选择\r\n              selectionAdorned: false, //显示选中边框\r\n              // reshapable:true, // 重塑(改变shape形状边界时使用，将影响节点大小)\r\n              // resizable: true, // 可调整大小的(手动调整节点大小时，节点内容显示区域时使用)\r\n            }, new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n            $(go.Panel, //表明需要创建一个panel面板对象//声明创建一个新的面板对象,自定义方式可参考mySelf.myDiagram.nodeTemplate\r\n              \"Auto\", //页面布局为自动\r\n              $(go.Shape,//声明构建一个圆形\r\n                // this.shape[count], \r\n                'Circle',\r\n                {\r\n                  fill: this.color[count],\r\n                  cursor: \"pointer\",//指针\r\n                  stroke: null,//外框颜色null\r\n                  portId: \"\",\r\n                  fromLinkable: true,\r\n                  fromLinkableSelfNode: false,\r\n                  fromLinkableDuplicates: true,\r\n                  toLinkable: true,\r\n                  toLinkableSelfNode: false,\r\n                  toLinkableDuplicates: false,\r\n                },\r\n                new go.Binding(\"figure\", \"figure\") //声明并创建一个新的图形\r\n              ),\r\n              $(go.TextBlock, {//声明一个可编辑文本域\r\n                font: \"10pt Helvetica, Arial, sans-serif\",\r\n                width: 50,\r\n                maxSize: new go.Size(180, NaN),\r\n                wrap: go.TextBlock.WrapFit, //文本域换行\r\n                editable: true, //是否可编辑\r\n                margin: 6,\r\n              },\r\n                new go.Binding(\"text\").makeTwoWay()\r\n              ),\r\n            ),\r\n            {//  悬浮提示\r\n              toolTip:\r\n                $(\"ToolTip\",\r\n                  $(go.TextBlock, { margin: 4 },\r\n                    new go.Binding(\"text\", key))\r\n                ),\r\n            }\r\n          )\r\n        );\r\n        count = count + 1\r\n\r\n      }\r\n\r\n      // mySelf.myDiagram.nodeTemplateMap.add(//创建名为node258的节点\r\n      //   \"model\",\r\n      //   $(go.Node,\r\n      //     \"auto\",\r\n      //     {\r\n      //       movable: true,//是否可拖动\r\n      //       deletable: true,//是否可删除\r\n      //       selectable: true, //是否可选择\r\n      //       selectionAdorned: false, //显示选中边框\r\n      //       // reshapable:true, // 重塑(改变shape形状边界时使用，将影响节点大小)\r\n      //       // resizable: true, // 可调整大小的(手动调整节点大小时，节点内容显示区域时使用)\r\n      //     }, new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n      //     $(go.Panel, //表明需要创建一个panel面板对象//声明创建一个新的面板对象,自定义方式可参考mySelf.myDiagram.nodeTemplate\r\n      //       \"Auto\", //页面布局为自动\r\n      //       $(go.Shape,//声明构建一个圆形\r\n      //         \"Square\", {\r\n      //         fill: \"#44CCFF\",//内填充色\r\n      //         cursor: \"pointer\",//指针\r\n      //         stroke: null,//外框颜色null\r\n      //         portId: \"\",\r\n      //         fromLinkable: true,\r\n      //         fromLinkableSelfNode: false,\r\n      //         fromLinkableDuplicates: true,\r\n      //         toLinkable: true,\r\n      //         toLinkableSelfNode: false,\r\n      //         toLinkableDuplicates: false,\r\n      //       },\r\n      //         new go.Binding(\"figure\", \"figure\") //声明并创建一个新的图形\r\n      //       ),\r\n      //       $(go.TextBlock, {//声明一个可编辑文本域\r\n      //         font: \"12pt Helvetica, Arial, sans-serif\",\r\n      //         width: 50,\r\n      //         maxSize: new go.Size(360, NaN),\r\n      //         wrap: go.TextBlock.WrapFit, //文本域换行\r\n      //         editable: true, //是否可编辑\r\n      //         margin: 12,\r\n      //       },\r\n      //         new go.Binding(\"text\").makeTwoWay()\r\n      //       ),\r\n      //     ),\r\n      //     {//  悬浮提示\r\n      //       toolTip:\r\n      //         $(\"ToolTip\",\r\n      //           $(go.TextBlock, { margin: 4 },\r\n      //             new go.Binding(\"text\", \"text\"))\r\n      //         ),\r\n      //     }\r\n      //   )\r\n      // );\r\n\r\n      // mySelf.myDiagram.nodeTemplateMap.add(//创建名为node258的节点\r\n      //   \"data_process\",\r\n      //   $(go.Node,\r\n      //     \"auto\",\r\n      //     {\r\n      //       movable: true,//是否可拖动\r\n      //       deletable: true,//是否可删除\r\n      //       selectable: true, //是否可选择\r\n      //       selectionAdorned: false, //显示选中边框\r\n      //       // reshapable:true, // 重塑(改变shape形状边界时使用，将影响节点大小)\r\n      //       // resizable: true, // 可调整大小的(手动调整节点大小时，节点内容显示区域时使用)\r\n      //     }, new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n      //     $(go.Panel, //表明需要创建一个panel面板对象//声明创建一个新的面板对象,自定义方式可参考mySelf.myDiagram.nodeTemplate\r\n      //       \"Auto\", //页面布局为自动\r\n      //       $(go.Shape,//声明构建一个圆形\r\n      //         \"Circle\", {\r\n      //         fill: \"#44CCFF\",//内填充色\r\n      //         cursor: \"pointer\",//指针\r\n      //         stroke: null,//外框颜色null\r\n      //         portId: \"\",\r\n      //         fromLinkable: true,\r\n      //         fromLinkableSelfNode: false,\r\n      //         fromLinkableDuplicates: true,\r\n      //         toLinkable: true,\r\n      //         toLinkableSelfNode: false,\r\n      //         toLinkableDuplicates: false,\r\n      //       },\r\n      //         new go.Binding(\"figure\", \"figure\") //声明并创建一个新的图形\r\n      //       ),\r\n      //       $(go.TextBlock, {//声明一个可编辑文本域\r\n      //         font: \"12pt Helvetica, Arial, sans-serif\",\r\n      //         width: 50,\r\n      //         maxSize: new go.Size(360, NaN),\r\n      //         wrap: go.TextBlock.WrapFit, //文本域换行\r\n      //         editable: true, //是否可编辑\r\n      //         margin: 12,\r\n      //       },\r\n      //         new go.Binding(\"text\").makeTwoWay()\r\n      //       ),\r\n      //     ),\r\n      //     {//  悬浮提示\r\n      //       toolTip:\r\n      //         $(\"ToolTip\",\r\n      //           $(go.TextBlock, { margin: 4 },\r\n      //             new go.Binding(\"text\", \"text\"))\r\n      //         ),\r\n      //     }\r\n      //   )\r\n      // );\r\n\r\n\r\n      // let myModel = $(go.GraphLinksModel); //也可以创建link model;需要配置myModel.linkDataArray 如下\r\n      // myModel.nodeDataArray = mySelf.nodeData;\r\n      // myModel.linkDataArray = mySelf.linkData;\r\n      // mySelf.myDiagram.model = myModel;\r\n\r\n      // mySelf.myDiagram.model.nodeDataArray = mySelf.nodeData;\r\n      // mySelf.myDiagram.model.linkDataArray = mySelf.linkData;\r\n      mySelf.initPalette1();\r\n\r\n\r\n    },\r\n    initPalette1 () {\r\n      var mySelf = this;\r\n      const transformedData = [];\r\n      // console.log('@@');\r\n      // console.log(this.preprocess_node);\r\n      for (const category in this.preprocess_node) {\r\n        const texts = this.preprocess_node[category];\r\n        texts.forEach(text => {\r\n          transformedData.push({ category, text });\r\n        });\r\n      }\r\n      // console.log('!!');\r\n      // console.log(transformedData);\r\n      window.myPalette1 = $(\r\n        go.Palette,\r\n        \"myPalette1\", // 必须命名或引用DIV.HTML元素\r\n        {\r\n          scrollsPageOnFocus: false,\r\n          nodeTemplateMap: mySelf.myDiagram.nodeTemplateMap, // 共享myDiagram使用的模板\r\n          model: new go.GraphLinksModel(transformedData)\r\n        }\r\n      );\r\n    },\r\n\r\n    init2 () {\r\n      var mySelf = this;\r\n      var count = 0\r\n      for (var key in this.model_node) {\r\n        mySelf.myDiagram.nodeTemplateMap.add(//创建名为node258的节点\r\n          key,\r\n          $(go.Node,\r\n            \"auto\",\r\n            {\r\n              movable: true,//是否可拖动\r\n              deletable: true,//是否可删除\r\n              selectable: true, //是否可选择\r\n              selectionAdorned: false, //显示选中边框\r\n              // reshapable:true, // 重塑(改变shape形状边界时使用，将影响节点大小)\r\n              // resizable: true, // 可调整大小的(手动调整节点大小时，节点内容显示区域时使用)\r\n            }, new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n            $(go.Panel, //表明需要创建一个panel面板对象//声明创建一个新的面板对象,自定义方式可参考mySelf.myDiagram.nodeTemplate\r\n              \"Auto\", //页面布局为自动\r\n              $(go.Shape,//声明构建一个圆形\r\n                // this.shape[count], \r\n                'Square',\r\n                {\r\n                  fill: this.color[count],\r\n                  cursor: \"pointer\",//指针\r\n                  stroke: null,//外框颜色null\r\n                  portId: \"\",\r\n                  fromLinkable: true,\r\n                  fromLinkableSelfNode: false,\r\n                  fromLinkableDuplicates: true,\r\n                  toLinkable: true,\r\n                  toLinkableSelfNode: false,\r\n                  toLinkableDuplicates: false,\r\n                },\r\n                new go.Binding(\"figure\", \"figure\") //声明并创建一个新的图形\r\n              ),\r\n              $(go.TextBlock, {//声明一个可编辑文本域\r\n                font: \"10pt Helvetica, Arial, sans-serif\",\r\n                width: 50,\r\n                maxSize: new go.Size(180, NaN),\r\n                wrap: go.TextBlock.WrapFit, //文本域换行\r\n                editable: true, //是否可编辑\r\n                margin: 6,\r\n              },\r\n                new go.Binding(\"text\").makeTwoWay()\r\n              ),\r\n            ),\r\n            {//  悬浮提示\r\n              toolTip:\r\n                $(\"ToolTip\",\r\n                  $(go.TextBlock, { margin: 4 },\r\n                    new go.Binding(\"text\", key))\r\n                ),\r\n            }\r\n          )\r\n        );\r\n        count = count + 1\r\n\r\n      }\r\n\r\n      mySelf.initPalette2();\r\n\r\n\r\n    },\r\n    initPalette2 () {\r\n\r\n      var mySelf = this;\r\n      const transformedData = [];\r\n\r\n      for (const category in this.model_node) {\r\n        const texts = this.model_node[category];\r\n        texts.forEach(text => {\r\n          transformedData.push({ category, text });\r\n        });\r\n      }\r\n\r\n      // console.log(transformedData);\r\n      window.myPalette2 = $(\r\n        go.Palette,\r\n        \"myPalette2\", // 必须命名或引用DIV.HTML元素\r\n        {\r\n          scrollsPageOnFocus: false,\r\n          nodeTemplateMap: mySelf.myDiagram.nodeTemplateMap, // 共享myDiagram使用的模板\r\n          model: new go.GraphLinksModel(transformedData)\r\n        }\r\n      );\r\n    },\r\n\r\n    init3 () {\r\n      var mySelf = this;\r\n      var count = 0\r\n      for (var key in this.data_node) {\r\n        mySelf.myDiagram.nodeTemplateMap.add(//创建名为node258的节点\r\n          key,\r\n          $(go.Node,\r\n            \"auto\",\r\n            {\r\n              movable: true,//是否可拖动\r\n              deletable: true,//是否可删除\r\n              selectable: true, //是否可选择\r\n              selectionAdorned: false, //显示选中边框\r\n              // reshapable:true, // 重塑(改变shape形状边界时使用，将影响节点大小)\r\n              // resizable: true, // 可调整大小的(手动调整节点大小时，节点内容显示区域时使用)\r\n            }, new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n            $(go.Panel, //表明需要创建一个panel面板对象//声明创建一个新的面板对象,自定义方式可参考mySelf.myDiagram.nodeTemplate\r\n              \"Auto\", //页面布局为自动\r\n              $(go.Shape,//声明构建一个圆形\r\n                'Circle',\r\n                {\r\n                  fill: this.color[count],\r\n                  cursor: \"pointer\",//指针\r\n                  stroke: null,//外框颜色null\r\n                  portId: \"\",\r\n                  fromLinkable: true,\r\n                  fromLinkableSelfNode: false,\r\n                  fromLinkableDuplicates: true,\r\n                  toLinkable: true,\r\n                  toLinkableSelfNode: false,\r\n                  toLinkableDuplicates: false,\r\n                },\r\n                new go.Binding(\"figure\", \"figure\") //声明并创建一个新的图形\r\n              ),\r\n              $(go.TextBlock, {//声明一个可编辑文本域\r\n                font: \"10pt Helvetica, Arial, sans-serif\",\r\n                width: 50,\r\n                maxSize: new go.Size(180, NaN),\r\n                wrap: go.TextBlock.WrapFit, //文本域换行\r\n                editable: true, //是否可编辑\r\n                margin: 6,\r\n              },\r\n                new go.Binding(\"text\").makeTwoWay()\r\n              ),\r\n            ),\r\n            {//  悬浮提示\r\n              toolTip:\r\n                $(\"ToolTip\",\r\n                  $(go.TextBlock, { margin: 4 },\r\n                    new go.Binding(\"text\", key))\r\n                ),\r\n            }\r\n          )\r\n        );\r\n        count = count + 1\r\n\r\n      }\r\n\r\n      mySelf.initPalette3();\r\n\r\n\r\n    },\r\n    initPalette3 () {\r\n\r\n      var mySelf = this;\r\n      const transformedData = [];\r\n\r\n      for (const category in this.data_node) {\r\n        const texts = this.data_node[category];\r\n        texts.forEach(text => {\r\n          transformedData.push({ category, text });\r\n        });\r\n      }\r\n\r\n      // console.log(transformedData);\r\n      window.myPalette3 = $(\r\n        go.Palette,\r\n        \"myPalette3\", // 必须命名或引用DIV.HTML元素\r\n        {\r\n          scrollsPageOnFocus: false,\r\n          nodeTemplateMap: mySelf.myDiagram.nodeTemplateMap, // 共享myDiagram使用的模板\r\n          model: new go.GraphLinksModel(transformedData)\r\n        }\r\n      );\r\n    },\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n#form-wrap {\r\n  padding: 20px 40px;\r\n  border: solid 1px rgb(244, 244, 244);\r\n}\r\n\r\n#submit {\r\n  width: 102px;\r\n  height: 40px;\r\n  float: right;\r\n  margin: 20px 5px 16px 0;\r\n}\r\n\r\n#chart-wrap {\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-bottom: 22px;\r\n\r\n  #myPalette1 {\r\n    width: 200px;\r\n    height: 600px;\r\n    margin-top: 30px;\r\n    margin-right: 30px;\r\n    background-color: white;\r\n    border: solid 1px rgb(244, 244, 244);\r\n  }\r\n  #myPalette2 {\r\n    width: 200px;\r\n    height: 600px;\r\n    margin-top: 30px;\r\n    margin-right: 30px;\r\n    background-color: white;\r\n    border: solid 1px rgb(244, 244, 244);\r\n  }\r\n  #myPalette3 {\r\n    width: 200px;\r\n    height: 600px;\r\n    margin-top: 30px;\r\n    margin-right: 30px;\r\n    background-color: white;\r\n    border: solid 1px rgb(244, 244, 244);\r\n  }\r\n  #myDiagramDiv {\r\n    flex-grow: 1;\r\n    height: 720px;\r\n    background-color: white;\r\n    border: solid 1px rgb(244, 244, 244);\r\n  }\r\n}\r\n\r\n#SaveButton {\r\n  position: relative;\r\n  height: 60px;\r\n  width: 100px;\r\n  top: -60px;\r\n  margin-left: 800px;\r\n  background: #82ff90;\r\n}\r\n</style>"]}]}